{"ast":null,"code":"var _jsxFileName = \"/Users/bigvdhopte/Documents/Vedant/Projects/StreamTube/client/src/components/chat/Chat.jsx\",\n    _s = $RefreshSig$();\n\nimport Message from '../message/Message';\nimport './chat.css';\nimport { useContext, useRef, useState, useEffect } from 'react';\nimport { AuthContext } from '../../context/AuthContext';\nimport { io } from 'socket.io-client';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Chat({\n  room\n}) {\n  _s();\n\n  const [newMessage, setNewMessage] = useState(\"\");\n  const {\n    user\n  } = useContext(AuthContext);\n  const scrollRef = useRef();\n  const [messages, setMessages] = useState([]);\n  const socket = useRef(); // initialize socket connection\n\n  useEffect(() => {\n    socket.current = io(\"ws://localhost:8900\");\n    socket.current.on(\"getMessage\", data => {\n      setArrivalMessage({\n        sender: data.senderId,\n        text: data.text,\n        createdAt: Date.now()\n      });\n    });\n  }, []);\n  useEffect(() => {\n    socket.current.emit(\"addUser\", user._id);\n    socket.current.on('getUsers', users => {\n      console.log(users);\n    });\n  }, [user]); // get room messages\n\n  useEffect(() => {\n    const getMessages = async () => {\n      try {\n        const res = await axios.get(`/messages/${room._id}`);\n        setMessages(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getMessages();\n  }, [room]);\n\n  const handleSend = async e => {\n    e.preventDefault();\n    const message = {\n      senderID: user._id,\n      text: newMessage,\n      roomID: room._id,\n      senderProfilePicture: user.profilePicture\n    };\n\n    try {\n      const res = await axios.post(\"/messages\", message);\n      setMessages([...messages, res.data]);\n      setNewMessage(\"\");\n    } catch (err) {\n      console.log(err);\n    }\n  }; // scroll to bottom of messages\n\n\n  useEffect(() => {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatTop\",\n      children: messages.map(m => /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: scrollRef,\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          message: m,\n          own: m.senderID === user._id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, m._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatBottom\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"chatMessageInput\",\n        placeholder: \"write something...\",\n        onChange: e => setNewMessage(e.target.value),\n        value: newMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"chatSendButton\",\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Chat, \"wRZ6U4caDaBTHd++aIYtB9ktxmo=\");\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/bigvdhopte/Documents/Vedant/Projects/StreamTube/client/src/components/chat/Chat.jsx"],"names":["Message","useContext","useRef","useState","useEffect","AuthContext","io","axios","Chat","room","newMessage","setNewMessage","user","scrollRef","messages","setMessages","socket","current","on","data","setArrivalMessage","sender","senderId","text","createdAt","Date","now","emit","_id","users","console","log","getMessages","res","get","err","handleSend","e","preventDefault","message","senderID","roomID","senderProfilePicture","profilePicture","post","scrollIntoView","behavior","map","m","target","value"],"mappings":"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","sourcesContent":["import Message from '../message/Message'\nimport './chat.css'\nimport { useContext, useRef, useState, useEffect } from 'react';\nimport { AuthContext } from '../../context/AuthContext'\nimport { io } from 'socket.io-client'\nimport axios from 'axios'\n\nexport default function Chat({room}) {\n  const [newMessage, setNewMessage] = useState(\"\");\n  const { user } = useContext(AuthContext)\n  const scrollRef = useRef()\n  const [messages, setMessages] = useState([]);\n  const socket = useRef()\n\n  // initialize socket connection\n  useEffect(() => {\n    socket.current = io(\"ws://localhost:8900\");\n    socket.current.on(\"getMessage\", (data) => {\n      setArrivalMessage({\n        sender: data.senderId,\n        text: data.text,\n        createdAt: Date.now(),\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    socket.current.emit(\"addUser\", user._id)\n    socket.current.on('getUsers', users => {\n      console.log(users)\n    })\n  }, [user])\n\n  // get room messages\n  useEffect(() => {\n    const getMessages = async () => {\n      try {\n        const res = await axios.get(`/messages/${room._id}`);\n        setMessages(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getMessages();\n  }, [room]);\n\n  const handleSend = async (e) => {\n    e.preventDefault();\n\n    const message = {\n      senderID: user._id,\n      text: newMessage,\n      roomID: room._id,\n      senderProfilePicture: user.profilePicture\n    };\n\n    try {\n      const res = await axios.post(\"/messages\", message);\n      setMessages([...messages, res.data]);\n      setNewMessage(\"\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // scroll to bottom of messages\n  useEffect(() => {\n    scrollRef.current?.scrollIntoView({behavior: 'smooth'})\n  }, [messages])\n  \n  return (\n    <>\n    <div className=\"chatTop\">\n      {messages.map((m) => (\n        <div ref={scrollRef} key={m._id}>\n          <Message message={m} own={m.senderID === user._id} />\n        </div>\n      ))}\n    </div>\n\n    <div className=\"chatBottom\">\n      <textarea\n        className=\"chatMessageInput\"\n        placeholder=\"write something...\"\n        onChange={(e) => setNewMessage(e.target.value)}\n        value={newMessage}\n      >\n      </textarea>\n      <button className=\"chatSendButton\" onClick={handleSend}>\n        Send\n      </button>\n    </div>\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}